
DDtesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000dbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001297  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b8  00000000  00000000  000021cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a18  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  00003364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001374  00000000  00000000  0000374f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004ac3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 04 	call	0x94c	; 0x94c <main>
  88:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <i2c_init>:

/*
 * set sleep enabled
 */
void mpu6050_setSleepEnabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 1);
  90:	10 92 b9 00 	sts	0x00B9, r1
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 93 b8 00 	sts	0x00B8, r24
  9a:	08 95       	ret

0000009c <i2c_start>:
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 93 bc 00 	sts	0x00BC, r25
  a2:	4f ef       	ldi	r20, 0xFF	; 255
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	99 23       	and	r25, r25
  b2:	34 f0       	brlt	.+12     	; 0xc0 <i2c_start+0x24>
  b4:	41 50       	subi	r20, 0x01	; 1
  b6:	51 09       	sbc	r21, r1
  b8:	61 09       	sbc	r22, r1
  ba:	71 09       	sbc	r23, r1
  bc:	c0 f7       	brcc	.-16     	; 0xae <i2c_start+0x12>
  be:	04 c0       	rjmp	.+8      	; 0xc8 <i2c_start+0x2c>
  c0:	45 2b       	or	r20, r21
  c2:	46 2b       	or	r20, r22
  c4:	47 2b       	or	r20, r23
  c6:	41 f1       	breq	.+80     	; 0x118 <i2c_start+0x7c>
  c8:	90 91 b9 00 	lds	r25, 0x00B9
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	98 30       	cpi	r25, 0x08	; 8
  d0:	11 f0       	breq	.+4      	; 0xd6 <i2c_start+0x3a>
  d2:	90 31       	cpi	r25, 0x10	; 16
  d4:	19 f5       	brne	.+70     	; 0x11c <i2c_start+0x80>
  d6:	80 93 bb 00 	sts	0x00BB, r24
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ec eb       	ldi	r30, 0xBC	; 188
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	20 81       	ld	r18, Z
  ee:	22 23       	and	r18, r18
  f0:	2c f0       	brlt	.+10     	; 0xfc <i2c_start+0x60>
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	a1 09       	sbc	r26, r1
  f6:	b1 09       	sbc	r27, r1
  f8:	c8 f7       	brcc	.-14     	; 0xec <i2c_start+0x50>
  fa:	04 c0       	rjmp	.+8      	; 0x104 <i2c_start+0x68>
  fc:	89 2b       	or	r24, r25
  fe:	8a 2b       	or	r24, r26
 100:	8b 2b       	or	r24, r27
 102:	71 f0       	breq	.+28     	; 0x120 <i2c_start+0x84>
 104:	90 91 b9 00 	lds	r25, 0x00B9
 108:	98 7f       	andi	r25, 0xF8	; 248
 10a:	98 31       	cpi	r25, 0x18	; 24
 10c:	59 f0       	breq	.+22     	; 0x124 <i2c_start+0x88>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 34       	cpi	r25, 0x40	; 64
 112:	49 f4       	brne	.+18     	; 0x126 <i2c_start+0x8a>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret

00000128 <i2c_stop>:
 128:	84 e9       	ldi	r24, 0x94	; 148
 12a:	80 93 bc 00 	sts	0x00BC, r24
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	20 81       	ld	r18, Z
 138:	24 ff       	sbrs	r18, 4
 13a:	05 c0       	rjmp	.+10     	; 0x146 <i2c_stop+0x1e>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	81 15       	cp	r24, r1
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	92 07       	cpc	r25, r18
 144:	c1 f7       	brne	.-16     	; 0x136 <i2c_stop+0xe>
 146:	08 95       	ret

00000148 <i2c_write>:
 148:	80 93 bb 00 	sts	0x00BB, r24
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	80 93 bc 00 	sts	0x00BC, r24
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	20 81       	ld	r18, Z
 160:	22 23       	and	r18, r18
 162:	2c f0       	brlt	.+10     	; 0x16e <i2c_write+0x26>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	c8 f7       	brcc	.-14     	; 0x15e <i2c_write+0x16>
 16c:	04 c0       	rjmp	.+8      	; 0x176 <i2c_write+0x2e>
 16e:	89 2b       	or	r24, r25
 170:	8a 2b       	or	r24, r26
 172:	8b 2b       	or	r24, r27
 174:	41 f0       	breq	.+16     	; 0x186 <i2c_write+0x3e>
 176:	90 91 b9 00 	lds	r25, 0x00B9
 17a:	98 7f       	andi	r25, 0xF8	; 248
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	98 32       	cpi	r25, 0x28	; 40
 180:	19 f4       	brne	.+6      	; 0x188 <i2c_write+0x40>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret

0000018a <mpu6050_writeBytes>:
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	66 23       	and	r22, r22
 198:	d1 f0       	breq	.+52     	; 0x1ce <mpu6050_writeBytes+0x44>
 19a:	7a 01       	movw	r14, r20
 19c:	16 2f       	mov	r17, r22
 19e:	c8 2f       	mov	r28, r24
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 1ac:	e7 01       	movw	r28, r14
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	61 0f       	add	r22, r17
 1b2:	06 2f       	mov	r16, r22
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	0f 5f       	subi	r16, 0xFF	; 255
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	0e 0d       	add	r16, r14
 1bc:	1f 1d       	adc	r17, r15
 1be:	89 91       	ld	r24, Y+
 1c0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 1c4:	c0 17       	cp	r28, r16
 1c6:	d1 07       	cpc	r29, r17
 1c8:	d1 f7       	brne	.-12     	; 0x1be <mpu6050_writeBytes+0x34>
 1ca:	0e 94 94 00 	call	0x128	; 0x128 <i2c_stop>
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <mpu6050_writeByte>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	1f 92       	push	r1
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	69 83       	std	Y+1, r22	; 0x01
 1e8:	ae 01       	movw	r20, r28
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	0e 94 c5 00 	call	0x18a	; 0x18a <mpu6050_writeBytes>
 1f4:	0f 90       	pop	r0
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <i2c_readAck>:
 1fc:	84 ec       	ldi	r24, 0xC4	; 196
 1fe:	80 93 bc 00 	sts	0x00BC, r24
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	a0 e0       	ldi	r26, 0x00	; 0
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	ec eb       	ldi	r30, 0xBC	; 188
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	20 81       	ld	r18, Z
 210:	22 23       	and	r18, r18
 212:	2c f0       	brlt	.+10     	; 0x21e <i2c_readAck+0x22>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	a1 09       	sbc	r26, r1
 218:	b1 09       	sbc	r27, r1
 21a:	c8 f7       	brcc	.-14     	; 0x20e <i2c_readAck+0x12>
 21c:	04 c0       	rjmp	.+8      	; 0x226 <i2c_readAck+0x2a>
 21e:	89 2b       	or	r24, r25
 220:	8a 2b       	or	r24, r26
 222:	8b 2b       	or	r24, r27
 224:	19 f0       	breq	.+6      	; 0x22c <i2c_readAck+0x30>
 226:	80 91 bb 00 	lds	r24, 0x00BB
 22a:	08 95       	ret
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret

00000230 <i2c_readNak>:
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	a0 e0       	ldi	r26, 0x00	; 0
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	20 81       	ld	r18, Z
 244:	22 23       	and	r18, r18
 246:	2c f0       	brlt	.+10     	; 0x252 <i2c_readNak+0x22>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	a1 09       	sbc	r26, r1
 24c:	b1 09       	sbc	r27, r1
 24e:	c8 f7       	brcc	.-14     	; 0x242 <i2c_readNak+0x12>
 250:	04 c0       	rjmp	.+8      	; 0x25a <i2c_readNak+0x2a>
 252:	89 2b       	or	r24, r25
 254:	8a 2b       	or	r24, r26
 256:	8b 2b       	or	r24, r27
 258:	19 f0       	breq	.+6      	; 0x260 <i2c_readNak+0x30>
 25a:	80 91 bb 00 	lds	r24, 0x00BB
 25e:	08 95       	ret
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret

00000264 <mpu6050_readBytes>:
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	66 23       	and	r22, r22
 278:	b9 f1       	breq	.+110    	; 0x2e8 <mpu6050_readBytes+0x84>
 27a:	c5 2f       	mov	r28, r21
 27c:	d4 2f       	mov	r29, r20
 27e:	d6 2e       	mov	r13, r22
 280:	18 2f       	mov	r17, r24
 282:	80 ed       	ldi	r24, 0xD0	; 208
 284:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_write>
 28e:	85 e3       	ldi	r24, 0x35	; 53
 290:	8a 95       	dec	r24
 292:	f1 f7       	brne	.-4      	; 0x290 <mpu6050_readBytes+0x2c>
 294:	00 00       	nop
 296:	81 ed       	ldi	r24, 0xD1	; 209
 298:	0e 94 4e 00 	call	0x9c	; 0x9c <i2c_start>
 29c:	0d 2f       	mov	r16, r29
 29e:	1c 2f       	mov	r17, r28
 2a0:	ee 24       	eor	r14, r14
 2a2:	ea 94       	dec	r14
 2a4:	ed 0c       	add	r14, r13
 2a6:	f1 2c       	mov	r15, r1
 2a8:	ef ef       	ldi	r30, 0xFF	; 255
 2aa:	ee 1a       	sub	r14, r30
 2ac:	fe 0a       	sbc	r15, r30
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
 2b0:	d0 e0       	ldi	r29, 0x00	; 0
 2b2:	ad 2c       	mov	r10, r13
 2b4:	b1 2c       	mov	r11, r1
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	af 1a       	sub	r10, r31
 2ba:	b1 08       	sbc	r11, r1
 2bc:	ca 15       	cp	r28, r10
 2be:	db 05       	cpc	r29, r11
 2c0:	29 f4       	brne	.+10     	; 0x2cc <mpu6050_readBytes+0x68>
 2c2:	0e 94 18 01 	call	0x230	; 0x230 <i2c_readNak>
 2c6:	f8 01       	movw	r30, r16
 2c8:	80 83       	st	Z, r24
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <mpu6050_readBytes+0x70>
 2cc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <i2c_readAck>
 2d0:	f8 01       	movw	r30, r16
 2d2:	80 83       	st	Z, r24
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	0f 5f       	subi	r16, 0xFF	; 255
 2d8:	1f 4f       	sbci	r17, 0xFF	; 255
 2da:	ce 15       	cp	r28, r14
 2dc:	df 05       	cpc	r29, r15
 2de:	71 f7       	brne	.-36     	; 0x2bc <mpu6050_readBytes+0x58>
 2e0:	cd 2d       	mov	r28, r13
 2e2:	0e 94 94 00 	call	0x128	; 0x128 <i2c_stop>
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <mpu6050_readBytes+0x86>
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	8c 2f       	mov	r24, r28
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	bf 90       	pop	r11
 2fc:	af 90       	pop	r10
 2fe:	08 95       	ret

00000300 <mpu6050_readByte>:
 300:	ab 01       	movw	r20, r22
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	0e 94 32 01 	call	0x264	; 0x264 <mpu6050_readBytes>
 308:	08 95       	ret

0000030a <mpu6050_writeBits>:
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	44 23       	and	r20, r20
 31e:	89 f1       	breq	.+98     	; 0x382 <mpu6050_writeBits+0x78>
 320:	f2 2e       	mov	r15, r18
 322:	14 2f       	mov	r17, r20
 324:	06 2f       	mov	r16, r22
 326:	e8 2e       	mov	r14, r24
 328:	19 82       	std	Y+1, r1	; 0x01
 32a:	be 01       	movw	r22, r28
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	0e 94 80 01 	call	0x300	; 0x300 <mpu6050_readByte>
 334:	88 23       	and	r24, r24
 336:	29 f1       	breq	.+74     	; 0x382 <mpu6050_writeBits+0x78>
 338:	40 2f       	mov	r20, r16
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	41 1b       	sub	r20, r17
 33e:	51 09       	sbc	r21, r1
 340:	4f 5f       	subi	r20, 0xFF	; 255
 342:	5f 4f       	sbci	r21, 0xFF	; 255
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <mpu6050_writeBits+0x44>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a 95       	dec	r17
 350:	e2 f7       	brpl	.-8      	; 0x34a <mpu6050_writeBits+0x40>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	04 2e       	mov	r0, r20
 356:	02 c0       	rjmp	.+4      	; 0x35c <mpu6050_writeBits+0x52>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <mpu6050_writeBits+0x4e>
 360:	2f 2d       	mov	r18, r15
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <mpu6050_writeBits+0x60>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	4a 95       	dec	r20
 36c:	e2 f7       	brpl	.-8      	; 0x366 <mpu6050_writeBits+0x5c>
 36e:	68 2f       	mov	r22, r24
 370:	60 95       	com	r22
 372:	99 81       	ldd	r25, Y+1	; 0x01
 374:	69 23       	and	r22, r25
 376:	82 23       	and	r24, r18
 378:	68 2b       	or	r22, r24
 37a:	69 83       	std	Y+1, r22	; 0x01
 37c:	8e 2d       	mov	r24, r14
 37e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	08 95       	ret

00000392 <mpu6050_writeBit>:
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	1f 92       	push	r1
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	18 2f       	mov	r17, r24
 3a4:	06 2f       	mov	r16, r22
 3a6:	f4 2e       	mov	r15, r20
 3a8:	be 01       	movw	r22, r28
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	0e 94 80 01 	call	0x300	; 0x300 <mpu6050_readByte>
 3b2:	ff 20       	and	r15, r15
 3b4:	59 f0       	breq	.+22     	; 0x3cc <mpu6050_writeBit+0x3a>
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <mpu6050_writeBit+0x30>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	0a 95       	dec	r16
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <mpu6050_writeBit+0x2c>
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	68 2b       	or	r22, r24
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <mpu6050_writeBit+0x50>
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	b9 01       	movw	r22, r18
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <mpu6050_writeBit+0x46>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	0a 95       	dec	r16
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <mpu6050_writeBit+0x42>
 3dc:	60 95       	com	r22
 3de:	99 81       	ldd	r25, Y+1	; 0x01
 3e0:	69 23       	and	r22, r25
 3e2:	69 83       	std	Y+1, r22	; 0x01
 3e4:	81 2f       	mov	r24, r17
 3e6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	08 95       	ret

000003f8 <mpu6050_setSleepDisabled>:
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	66 e0       	ldi	r22, 0x06	; 6
 3fc:	8b e6       	ldi	r24, 0x6B	; 107
 3fe:	0e 94 c9 01 	call	0x392	; 0x392 <mpu6050_writeBit>
 402:	08 95       	ret

00000404 <mpu6050_init>:
 404:	0e 94 48 00 	call	0x90	; 0x90 <i2c_init>
 408:	25 e3       	ldi	r18, 0x35	; 53
 40a:	2a 95       	dec	r18
 40c:	f1 f7       	brne	.-4      	; 0x40a <mpu6050_init+0x6>
 40e:	00 00       	nop
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	91 ee       	ldi	r25, 0xE1	; 225
 414:	24 e0       	ldi	r18, 0x04	; 4
 416:	81 50       	subi	r24, 0x01	; 1
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	20 40       	sbci	r18, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <mpu6050_init+0x12>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <mpu6050_init+0x1c>
 420:	00 00       	nop
 422:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <mpu6050_setSleepDisabled>
 426:	8f e3       	ldi	r24, 0x3F	; 63
 428:	9c e9       	ldi	r25, 0x9C	; 156
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <mpu6050_init+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <mpu6050_init+0x2c>
 430:	00 00       	nop
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	43 e0       	ldi	r20, 0x03	; 3
 436:	62 e0       	ldi	r22, 0x02	; 2
 438:	8b e6       	ldi	r24, 0x6B	; 107
 43a:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_writeBits>
 43e:	23 e0       	ldi	r18, 0x03	; 3
 440:	43 e0       	ldi	r20, 0x03	; 3
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	8a e1       	ldi	r24, 0x1A	; 26
 446:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_writeBits>
 44a:	64 e0       	ldi	r22, 0x04	; 4
 44c:	89 e1       	ldi	r24, 0x19	; 25
 44e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mpu6050_writeByte>
 452:	23 e0       	ldi	r18, 0x03	; 3
 454:	42 e0       	ldi	r20, 0x02	; 2
 456:	64 e0       	ldi	r22, 0x04	; 4
 458:	8b e1       	ldi	r24, 0x1B	; 27
 45a:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_writeBits>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	42 e0       	ldi	r20, 0x02	; 2
 462:	64 e0       	ldi	r22, 0x04	; 4
 464:	8c e1       	ldi	r24, 0x1C	; 28
 466:	0e 94 85 01 	call	0x30a	; 0x30a <mpu6050_writeBits>
 46a:	08 95       	ret

0000046c <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
 46c:	8f 92       	push	r8
 46e:	9f 92       	push	r9
 470:	af 92       	push	r10
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	4c 01       	movw	r8, r24
 486:	5b 01       	movw	r10, r22
 488:	6a 01       	movw	r12, r20
 48a:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
 48c:	42 e0       	ldi	r20, 0x02	; 2
 48e:	51 e0       	ldi	r21, 0x01	; 1
 490:	6e e0       	ldi	r22, 0x0E	; 14
 492:	8b e3       	ldi	r24, 0x3B	; 59
 494:	0e 94 32 01 	call	0x264	; 0x264 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
 498:	e2 e0       	ldi	r30, 0x02	; 2
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	20 81       	ld	r18, Z
 49e:	81 81       	ldd	r24, Z+1	; 0x01
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	92 2b       	or	r25, r18
 4a4:	d4 01       	movw	r26, r8
 4a6:	8d 93       	st	X+, r24
 4a8:	9c 93       	st	X, r25
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
 4aa:	22 81       	ldd	r18, Z+2	; 0x02
 4ac:	83 81       	ldd	r24, Z+3	; 0x03
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	92 2b       	or	r25, r18
 4b2:	d5 01       	movw	r26, r10
 4b4:	8d 93       	st	X+, r24
 4b6:	9c 93       	st	X, r25
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
 4b8:	24 81       	ldd	r18, Z+4	; 0x04
 4ba:	85 81       	ldd	r24, Z+5	; 0x05
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	92 2b       	or	r25, r18
 4c0:	d6 01       	movw	r26, r12
 4c2:	8d 93       	st	X+, r24
 4c4:	9c 93       	st	X, r25
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
 4c6:	20 85       	ldd	r18, Z+8	; 0x08
 4c8:	81 85       	ldd	r24, Z+9	; 0x09
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	92 2b       	or	r25, r18
 4ce:	99 83       	std	Y+1, r25	; 0x01
 4d0:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
 4d2:	22 85       	ldd	r18, Z+10	; 0x0a
 4d4:	83 85       	ldd	r24, Z+11	; 0x0b
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	92 2b       	or	r25, r18
 4da:	d8 01       	movw	r26, r16
 4dc:	8d 93       	st	X+, r24
 4de:	9c 93       	st	X, r25
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
 4e0:	24 85       	ldd	r18, Z+12	; 0x0c
 4e2:	85 85       	ldd	r24, Z+13	; 0x0d
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	92 2b       	or	r25, r18
 4e8:	f7 01       	movw	r30, r14
 4ea:	91 83       	std	Z+1, r25	; 0x01
 4ec:	80 83       	st	Z, r24
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	bf 90       	pop	r11
 500:	af 90       	pop	r10
 502:	9f 90       	pop	r9
 504:	8f 90       	pop	r8
 506:	08 95       	ret

00000508 <mpu6050_getConvData>:

/*
 * get raw data converted to g and deg/sec values
 */
void mpu6050_getConvData(double* axg, double* ayg, double* azg, double* gxds, double* gyds, double* gzds) {
 508:	2f 92       	push	r2
 50a:	3f 92       	push	r3
 50c:	4f 92       	push	r4
 50e:	5f 92       	push	r5
 510:	6f 92       	push	r6
 512:	7f 92       	push	r7
 514:	8f 92       	push	r8
 516:	9f 92       	push	r9
 518:	af 92       	push	r10
 51a:	bf 92       	push	r11
 51c:	cf 92       	push	r12
 51e:	df 92       	push	r13
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
 530:	2c 97       	sbiw	r28, 0x0c	; 12
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	3c 01       	movw	r6, r24
 53e:	4b 01       	movw	r8, r22
 540:	5a 01       	movw	r10, r20
 542:	69 01       	movw	r12, r18
 544:	28 01       	movw	r4, r16
 546:	17 01       	movw	r2, r14
	int16_t ax = 0;
 548:	1a 82       	std	Y+2, r1	; 0x02
 54a:	19 82       	std	Y+1, r1	; 0x01
	int16_t ay = 0;
 54c:	1c 82       	std	Y+4, r1	; 0x04
 54e:	1b 82       	std	Y+3, r1	; 0x03
	int16_t az = 0;
 550:	1e 82       	std	Y+6, r1	; 0x06
 552:	1d 82       	std	Y+5, r1	; 0x05
	int16_t gx = 0;
 554:	18 86       	std	Y+8, r1	; 0x08
 556:	1f 82       	std	Y+7, r1	; 0x07
	int16_t gy = 0;
 558:	1a 86       	std	Y+10, r1	; 0x0a
 55a:	19 86       	std	Y+9, r1	; 0x09
	int16_t gz = 0;
 55c:	1c 86       	std	Y+12, r1	; 0x0c
 55e:	1b 86       	std	Y+11, r1	; 0x0b
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
 560:	ce 01       	movw	r24, r28
 562:	0b 96       	adiw	r24, 0x0b	; 11
 564:	7c 01       	movw	r14, r24
 566:	8e 01       	movw	r16, r28
 568:	07 5f       	subi	r16, 0xF7	; 247
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	9e 01       	movw	r18, r28
 56e:	29 5f       	subi	r18, 0xF9	; 249
 570:	3f 4f       	sbci	r19, 0xFF	; 255
 572:	ae 01       	movw	r20, r28
 574:	4b 5f       	subi	r20, 0xFB	; 251
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	be 01       	movw	r22, r28
 57a:	6d 5f       	subi	r22, 0xFD	; 253
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	0a 97       	sbiw	r24, 0x0a	; 10
 580:	0e 94 36 02 	call	0x46c	; 0x46c <mpu6050_getRawData>

	#if MPU6050_CALIBRATEDACCGYRO == 1
    *axg = (double)(ax-MPU6050_AXOFFSET)/MPU6050_AXGAIN;
 584:	69 81       	ldd	r22, Y+1	; 0x01
 586:	7a 81       	ldd	r23, Y+2	; 0x02
 588:	07 2e       	mov	r0, r23
 58a:	00 0c       	add	r0, r0
 58c:	88 0b       	sbc	r24, r24
 58e:	99 0b       	sbc	r25, r25
 590:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	40 e8       	ldi	r20, 0x80	; 128
 59a:	58 e3       	ldi	r21, 0x38	; 56
 59c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
 5a0:	f3 01       	movw	r30, r6
 5a2:	60 83       	st	Z, r22
 5a4:	71 83       	std	Z+1, r23	; 0x01
 5a6:	82 83       	std	Z+2, r24	; 0x02
 5a8:	93 83       	std	Z+3, r25	; 0x03
    *ayg = (double)(ay-MPU6050_AYOFFSET)/MPU6050_AYGAIN;
 5aa:	6b 81       	ldd	r22, Y+3	; 0x03
 5ac:	7c 81       	ldd	r23, Y+4	; 0x04
 5ae:	07 2e       	mov	r0, r23
 5b0:	00 0c       	add	r0, r0
 5b2:	88 0b       	sbc	r24, r24
 5b4:	99 0b       	sbc	r25, r25
 5b6:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e8       	ldi	r20, 0x80	; 128
 5c0:	58 e3       	ldi	r21, 0x38	; 56
 5c2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
 5c6:	f4 01       	movw	r30, r8
 5c8:	60 83       	st	Z, r22
 5ca:	71 83       	std	Z+1, r23	; 0x01
 5cc:	82 83       	std	Z+2, r24	; 0x02
 5ce:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az-MPU6050_AZOFFSET)/MPU6050_AZGAIN;
 5d0:	6d 81       	ldd	r22, Y+5	; 0x05
 5d2:	7e 81       	ldd	r23, Y+6	; 0x06
 5d4:	07 2e       	mov	r0, r23
 5d6:	00 0c       	add	r0, r0
 5d8:	88 0b       	sbc	r24, r24
 5da:	99 0b       	sbc	r25, r25
 5dc:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	40 e8       	ldi	r20, 0x80	; 128
 5e6:	58 e3       	ldi	r21, 0x38	; 56
 5e8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
 5ec:	f5 01       	movw	r30, r10
 5ee:	60 83       	st	Z, r22
 5f0:	71 83       	std	Z+1, r23	; 0x01
 5f2:	82 83       	std	Z+2, r24	; 0x02
 5f4:	93 83       	std	Z+3, r25	; 0x03
    *gxds = (double)(gx-MPU6050_GXOFFSET)/MPU6050_GXGAIN;
 5f6:	6f 81       	ldd	r22, Y+7	; 0x07
 5f8:	78 85       	ldd	r23, Y+8	; 0x08
 5fa:	66 5d       	subi	r22, 0xD6	; 214
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	07 2e       	mov	r0, r23
 600:	00 0c       	add	r0, r0
 602:	88 0b       	sbc	r24, r24
 604:	99 0b       	sbc	r25, r25
 606:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 60a:	23 e3       	ldi	r18, 0x33	; 51
 60c:	33 e3       	ldi	r19, 0x33	; 51
 60e:	43 e8       	ldi	r20, 0x83	; 131
 610:	51 e4       	ldi	r21, 0x41	; 65
 612:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 616:	f6 01       	movw	r30, r12
 618:	60 83       	st	Z, r22
 61a:	71 83       	std	Z+1, r23	; 0x01
 61c:	82 83       	std	Z+2, r24	; 0x02
 61e:	93 83       	std	Z+3, r25	; 0x03
	*gyds = (double)(gy-MPU6050_GYOFFSET)/MPU6050_GYGAIN;
 620:	69 85       	ldd	r22, Y+9	; 0x09
 622:	7a 85       	ldd	r23, Y+10	; 0x0a
 624:	69 50       	subi	r22, 0x09	; 9
 626:	71 09       	sbc	r23, r1
 628:	07 2e       	mov	r0, r23
 62a:	00 0c       	add	r0, r0
 62c:	88 0b       	sbc	r24, r24
 62e:	99 0b       	sbc	r25, r25
 630:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 634:	23 e3       	ldi	r18, 0x33	; 51
 636:	33 e3       	ldi	r19, 0x33	; 51
 638:	43 e8       	ldi	r20, 0x83	; 131
 63a:	51 e4       	ldi	r21, 0x41	; 65
 63c:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 640:	f2 01       	movw	r30, r4
 642:	60 83       	st	Z, r22
 644:	71 83       	std	Z+1, r23	; 0x01
 646:	82 83       	std	Z+2, r24	; 0x02
 648:	93 83       	std	Z+3, r25	; 0x03
	*gzds = (double)(gz-MPU6050_GZOFFSET)/MPU6050_GZGAIN;
 64a:	6b 85       	ldd	r22, Y+11	; 0x0b
 64c:	7c 85       	ldd	r23, Y+12	; 0x0c
 64e:	63 5e       	subi	r22, 0xE3	; 227
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	07 2e       	mov	r0, r23
 654:	00 0c       	add	r0, r0
 656:	88 0b       	sbc	r24, r24
 658:	99 0b       	sbc	r25, r25
 65a:	0e 94 43 05 	call	0xa86	; 0xa86 <__floatsisf>
 65e:	23 e3       	ldi	r18, 0x33	; 51
 660:	33 e3       	ldi	r19, 0x33	; 51
 662:	43 e8       	ldi	r20, 0x83	; 131
 664:	51 e4       	ldi	r21, 0x41	; 65
 666:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 66a:	f1 01       	movw	r30, r2
 66c:	60 83       	st	Z, r22
 66e:	71 83       	std	Z+1, r23	; 0x01
 670:	82 83       	std	Z+2, r24	; 0x02
 672:	93 83       	std	Z+3, r25	; 0x03
    *azg = (double)(az)/MPU6050_AGAIN;
    *gxds = (double)(gx)/MPU6050_GGAIN;
	*gyds = (double)(gy)/MPU6050_GGAIN;
	*gzds = (double)(gz)/MPU6050_GGAIN;
	#endif
}
 674:	2c 96       	adiw	r28, 0x0c	; 12
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	f8 94       	cli
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	cd bf       	out	0x3d, r28	; 61
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	bf 90       	pop	r11
 692:	af 90       	pop	r10
 694:	9f 90       	pop	r9
 696:	8f 90       	pop	r8
 698:	7f 90       	pop	r7
 69a:	6f 90       	pop	r6
 69c:	5f 90       	pop	r5
 69e:	4f 90       	pop	r4
 6a0:	3f 90       	pop	r3
 6a2:	2f 90       	pop	r2
 6a4:	08 95       	ret

000006a6 <uartinit>:
#include "i2chw/i2cmaster.h"
#include "i2chw/twimastertimeout.c"

void uartinit (void)
{
	UBRR0H |= (unsigned char) (BAUDRATE>>8);
 6a6:	e5 ec       	ldi	r30, 0xC5	; 197
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	80 83       	st	Z, r24
	UBRR0L |= (unsigned char) BAUDRATE;
 6ae:	e4 ec       	ldi	r30, 0xC4	; 196
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	87 66       	ori	r24, 0x67	; 103
 6b6:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0); //enable receiver and transmitter
 6b8:	e1 ec       	ldi	r30, 0xC1	; 193
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	88 61       	ori	r24, 0x18	; 24
 6c0:	80 83       	st	Z, r24
	UCSR0C |= (3<<UCSZ00); // frame set
 6c2:	e2 ec       	ldi	r30, 0xC2	; 194
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	86 60       	ori	r24, 0x06	; 6
 6ca:	80 83       	st	Z, r24
 6cc:	08 95       	ret

000006ce <uarttransmit>:
}

void uarttransmit (int data)
{
	while (!( UCSR0A & (1<<UDRE0))); // wait till register is free
 6ce:	e0 ec       	ldi	r30, 0xC0	; 192
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	90 81       	ld	r25, Z
 6d4:	95 ff       	sbrs	r25, 5
 6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <uarttransmit+0x4>
	//data = 99;
	UDR0 = data; // load data in the register
 6d8:	80 93 c6 00 	sts	0x00C6, r24
 6dc:	08 95       	ret

000006de <uarttransmits>:
	//while (!( UCSR0A & (1<<UDRE0))); // second wait
	
}

void uarttransmits(char * str){
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	ec 01       	movw	r28, r24
	while (*str){
 6e4:	88 81       	ld	r24, Y
 6e6:	88 23       	and	r24, r24
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <uarttransmits+0x1a>
 6ea:	21 96       	adiw	r28, 0x01	; 1
		uarttransmit(*str++);
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
	//while (!( UCSR0A & (1<<UDRE0))); // second wait
	
}

void uarttransmits(char * str){
	while (*str){
 6f2:	89 91       	ld	r24, Y+
 6f4:	81 11       	cpse	r24, r1
 6f6:	fa cf       	rjmp	.-12     	; 0x6ec <uarttransmits+0xe>
		uarttransmit(*str++);
	}
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <adcinit>:

void adcinit(){
	
	//ADCSRA |= (1<<ADEN); // enabling adc
	ADCSRA |= (1<<ADPS2); // prescaler to 16
 6fe:	ea e7       	ldi	r30, 0x7A	; 122
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	84 60       	ori	r24, 0x04	; 4
 706:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); // left adjust
 708:	ec e7       	ldi	r30, 0x7C	; 124
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	80 62       	ori	r24, 0x20	; 32
 710:	80 83       	st	Z, r24
	ADMUX &= ~((1<<REFS0)|(1<<REFS1));// reference voltage // refs0 = 0 and refs1 = 0
 712:	80 81       	ld	r24, Z
 714:	8f 73       	andi	r24, 0x3F	; 63
 716:	80 83       	st	Z, r24
 718:	08 95       	ret

0000071a <adcread>:
}

void adcread(int pin){
	
	//while(!ADIF){}
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
 71a:	ec e7       	ldi	r30, 0x7C	; 124
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	20 81       	ld	r18, Z
 720:	20 7f       	andi	r18, 0xF0	; 240
 722:	20 83       	st	Z, r18
	
	switch(pin){
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	91 05       	cpc	r25, r1
 728:	b9 f0       	breq	.+46     	; 0x758 <adcread+0x3e>
 72a:	2c f4       	brge	.+10     	; 0x736 <adcread+0x1c>
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	49 f0       	breq	.+18     	; 0x742 <adcread+0x28>
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	61 f0       	breq	.+24     	; 0x74c <adcread+0x32>
 734:	22 c0       	rjmp	.+68     	; 0x77a <adcread+0x60>
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	91 05       	cpc	r25, r1
 73a:	a1 f0       	breq	.+40     	; 0x764 <adcread+0x4a>
 73c:	04 97       	sbiw	r24, 0x04	; 4
 73e:	c1 f0       	breq	.+48     	; 0x770 <adcread+0x56>
 740:	1c c0       	rjmp	.+56     	; 0x77a <adcread+0x60>
		case 0:	ADMUX |= (0<<MUX0); break; //setting input pin to ADC0
 742:	ec e7       	ldi	r30, 0x7C	; 124
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	80 83       	st	Z, r24
 74a:	17 c0       	rjmp	.+46     	; 0x77a <adcread+0x60>
		case 1: ADMUX |= (1<<MUX0); break;
 74c:	ec e7       	ldi	r30, 0x7C	; 124
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	81 60       	ori	r24, 0x01	; 1
 754:	80 83       	st	Z, r24
 756:	11 c0       	rjmp	.+34     	; 0x77a <adcread+0x60>
		case 2: ADMUX |= (0<<MUX0)|(1<<MUX1); break;
 758:	ec e7       	ldi	r30, 0x7C	; 124
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	80 83       	st	Z, r24
 762:	0b c0       	rjmp	.+22     	; 0x77a <adcread+0x60>
		case 3: ADMUX |= (1<<MUX0)|(1<<MUX1); break;
 764:	ec e7       	ldi	r30, 0x7C	; 124
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	83 60       	ori	r24, 0x03	; 3
 76c:	80 83       	st	Z, r24
 76e:	05 c0       	rjmp	.+10     	; 0x77a <adcread+0x60>
		case 4: ADMUX |= (0<<MUX0)|(0<<MUX1)|(1<<MUX2); break;
 770:	ec e7       	ldi	r30, 0x7C	; 124
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	84 60       	ori	r24, 0x04	; 4
 778:	80 83       	st	Z, r24
		default: break;
	}
	ADCSRA |= (1<<ADEN); // enabling adc everytime read is done
 77a:	ea e7       	ldi	r30, 0x7A	; 122
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	80 68       	ori	r24, 0x80	; 128
 782:	80 83       	st	Z, r24
	PRR &= ~(1<<PRADC); // disabling power save mode to start //pradc = 0
 784:	a4 e6       	ldi	r26, 0x64	; 100
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	8c 91       	ld	r24, X
 78a:	8e 7f       	andi	r24, 0xFE	; 254
 78c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);// starting conversion
 78e:	80 81       	ld	r24, Z
 790:	80 64       	ori	r24, 0x40	; 64
 792:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){};
 794:	80 81       	ld	r24, Z
 796:	86 fd       	sbrc	r24, 6
 798:	fd cf       	rjmp	.-6      	; 0x794 <adcread+0x7a>
}
 79a:	08 95       	ret

0000079c <adctransmit>:

void adctransmit(){
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	2a 97       	sbiw	r28, 0x0a	; 10
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
	while(ADCSRA & (1<<ADSC)){};
 7b0:	ea e7       	ldi	r30, 0x7A	; 122
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	86 fd       	sbrc	r24, 6
 7b8:	fd cf       	rjmp	.-6      	; 0x7b4 <adctransmit+0x18>
	int p = ADCH;
 7ba:	80 91 79 00 	lds	r24, 0x0079
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7be:	4a e0       	ldi	r20, 0x0A	; 10
 7c0:	be 01       	movw	r22, r28
 7c2:	6f 5f       	subi	r22, 0xFF	; 255
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 3c 06 	call	0xc78	; 0xc78 <__itoa_ncheck>
	char itmp[10];
	itoa(p, itmp, 10); uarttransmits(itmp);
 7cc:	ce 01       	movw	r24, r28
 7ce:	01 96       	adiw	r24, 0x01	; 1
 7d0:	0e 94 6f 03 	call	0x6de	; 0x6de <uarttransmits>
}
 7d4:	2a 96       	adiw	r28, 0x0a	; 10
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	08 95       	ret

000007e6 <mpu>:


void mpu(int mode) {
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	1f 93       	push	r17
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	ae 97       	sbiw	r28, 0x2e	; 46
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
	mpumode = mode;
 802:	90 93 01 01 	sts	0x0101, r25
 806:	80 93 00 01 	sts	0x0100, r24
	
	#if MPU6050_GETATTITUDE == 0
    int16_t ax = 0;
 80a:	1a 82       	std	Y+2, r1	; 0x02
 80c:	19 82       	std	Y+1, r1	; 0x01
    int16_t ay = 0;
 80e:	1c 82       	std	Y+4, r1	; 0x04
 810:	1b 82       	std	Y+3, r1	; 0x03
    int16_t az = 0;
 812:	1e 82       	std	Y+6, r1	; 0x06
 814:	1d 82       	std	Y+5, r1	; 0x05
    int16_t gx = 0;
 816:	18 86       	std	Y+8, r1	; 0x08
 818:	1f 82       	std	Y+7, r1	; 0x07
    int16_t gy = 0;
 81a:	1a 86       	std	Y+10, r1	; 0x0a
 81c:	19 86       	std	Y+9, r1	; 0x09
    int16_t gz = 0;
 81e:	1c 86       	std	Y+12, r1	; 0x0c
 820:	1b 86       	std	Y+11, r1	; 0x0b
    double axg = 0;
 822:	1d 86       	std	Y+13, r1	; 0x0d
 824:	1e 86       	std	Y+14, r1	; 0x0e
 826:	1f 86       	std	Y+15, r1	; 0x0f
 828:	18 8a       	std	Y+16, r1	; 0x10
    double ayg = 0;
 82a:	19 8a       	std	Y+17, r1	; 0x11
 82c:	1a 8a       	std	Y+18, r1	; 0x12
 82e:	1b 8a       	std	Y+19, r1	; 0x13
 830:	1c 8a       	std	Y+20, r1	; 0x14
    double azg = 0;
 832:	1d 8a       	std	Y+21, r1	; 0x15
 834:	1e 8a       	std	Y+22, r1	; 0x16
 836:	1f 8a       	std	Y+23, r1	; 0x17
 838:	18 8e       	std	Y+24, r1	; 0x18
    double gxds = 0;
 83a:	19 8e       	std	Y+25, r1	; 0x19
 83c:	1a 8e       	std	Y+26, r1	; 0x1a
 83e:	1b 8e       	std	Y+27, r1	; 0x1b
 840:	1c 8e       	std	Y+28, r1	; 0x1c
    double gyds = 0;
 842:	1d 8e       	std	Y+29, r1	; 0x1d
 844:	1e 8e       	std	Y+30, r1	; 0x1e
 846:	1f 8e       	std	Y+31, r1	; 0x1f
 848:	18 a2       	std	Y+32, r1	; 0x20
    double gzds = 0;
 84a:	19 a2       	std	Y+33, r1	; 0x21
 84c:	1a a2       	std	Y+34, r1	; 0x22
 84e:	1b a2       	std	Y+35, r1	; 0x23
 850:	1c a2       	std	Y+36, r1	; 0x24

    //init uart
	//uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
	
	//init interrupt
	sei();
 852:	78 94       	sei

	//init mpu6050
	mpu6050_init();
 854:	0e 94 02 02 	call	0x404	; 0x404 <mpu6050_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	80 e7       	ldi	r24, 0x70	; 112
 85c:	92 e0       	ldi	r25, 0x02	; 2
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	80 40       	sbci	r24, 0x00	; 0
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	e1 f7       	brne	.-8      	; 0x85e <mpu+0x78>
 866:	00 c0       	rjmp	.+0      	; 0x868 <mpu+0x82>
 868:	00 00       	nop
	mpu6050_dmpEnable();
	_delay_ms(10);
	#endif

	#if MPU6050_GETATTITUDE == 0
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
 86a:	ce 01       	movw	r24, r28
 86c:	0b 96       	adiw	r24, 0x0b	; 11
 86e:	7c 01       	movw	r14, r24
 870:	8e 01       	movw	r16, r28
 872:	07 5f       	subi	r16, 0xF7	; 247
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	9e 01       	movw	r18, r28
 878:	29 5f       	subi	r18, 0xF9	; 249
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	ae 01       	movw	r20, r28
 87e:	4b 5f       	subi	r20, 0xFB	; 251
 880:	5f 4f       	sbci	r21, 0xFF	; 255
 882:	be 01       	movw	r22, r28
 884:	6d 5f       	subi	r22, 0xFD	; 253
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	0a 97       	sbiw	r24, 0x0a	; 10
 88a:	0e 94 36 02 	call	0x46c	; 0x46c <mpu6050_getRawData>
	mpu6050_getConvData(&axg, &ayg, &azg, &gxds, &gyds, &gzds);
 88e:	ce 01       	movw	r24, r28
 890:	81 96       	adiw	r24, 0x21	; 33
 892:	7c 01       	movw	r14, r24
 894:	0c 5e       	subi	r16, 0xEC	; 236
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	9e 01       	movw	r18, r28
 89a:	27 5e       	subi	r18, 0xE7	; 231
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	ae 01       	movw	r20, r28
 8a0:	4b 5e       	subi	r20, 0xEB	; 235
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	be 01       	movw	r22, r28
 8a6:	6f 5e       	subi	r22, 0xEF	; 239
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	44 97       	sbiw	r24, 0x14	; 20
 8ac:	0e 94 84 02 	call	0x508	; 0x508 <mpu6050_getConvData>

	#if MPU6050_GETATTITUDE == 0
	char itmp[10];
			
	//uarttransmit(ax);
	ltoa(ax, itmp, 10); uarttransmits(itmp);
 8b0:	69 81       	ldd	r22, Y+1	; 0x01
 8b2:	7a 81       	ldd	r23, Y+2	; 0x02
 8b4:	07 2e       	mov	r0, r23
 8b6:	00 0c       	add	r0, r0
 8b8:	88 0b       	sbc	r24, r24
 8ba:	99 0b       	sbc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 8bc:	2a e0       	ldi	r18, 0x0A	; 10
 8be:	ae 01       	movw	r20, r28
 8c0:	4b 5d       	subi	r20, 0xDB	; 219
 8c2:	5f 4f       	sbci	r21, 0xFF	; 255
 8c4:	0e 94 47 06 	call	0xc8e	; 0xc8e <__ltoa_ncheck>
 8c8:	ce 01       	movw	r24, r28
 8ca:	85 96       	adiw	r24, 0x25	; 37
 8cc:	0e 94 6f 03 	call	0x6de	; 0x6de <uarttransmits>
	uarttransmit('+');
 8d0:	8b e2       	ldi	r24, 0x2B	; 43
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
	ltoa(ay, itmp, 10); uarttransmits(itmp);
 8d8:	6b 81       	ldd	r22, Y+3	; 0x03
 8da:	7c 81       	ldd	r23, Y+4	; 0x04
 8dc:	07 2e       	mov	r0, r23
 8de:	00 0c       	add	r0, r0
 8e0:	88 0b       	sbc	r24, r24
 8e2:	99 0b       	sbc	r25, r25
 8e4:	2a e0       	ldi	r18, 0x0A	; 10
 8e6:	ae 01       	movw	r20, r28
 8e8:	4b 5d       	subi	r20, 0xDB	; 219
 8ea:	5f 4f       	sbci	r21, 0xFF	; 255
 8ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <__ltoa_ncheck>
 8f0:	ce 01       	movw	r24, r28
 8f2:	85 96       	adiw	r24, 0x25	; 37
 8f4:	0e 94 6f 03 	call	0x6de	; 0x6de <uarttransmits>
	uarttransmit('+');
 8f8:	8b e2       	ldi	r24, 0x2B	; 43
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
	ltoa(az, itmp, 10); uarttransmits(itmp);
 900:	6d 81       	ldd	r22, Y+5	; 0x05
 902:	7e 81       	ldd	r23, Y+6	; 0x06
 904:	07 2e       	mov	r0, r23
 906:	00 0c       	add	r0, r0
 908:	88 0b       	sbc	r24, r24
 90a:	99 0b       	sbc	r25, r25
 90c:	2a e0       	ldi	r18, 0x0A	; 10
 90e:	ae 01       	movw	r20, r28
 910:	4b 5d       	subi	r20, 0xDB	; 219
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	0e 94 47 06 	call	0xc8e	; 0xc8e <__ltoa_ncheck>
 918:	ce 01       	movw	r24, r28
 91a:	85 96       	adiw	r24, 0x25	; 37
 91c:	0e 94 6f 03 	call	0x6de	; 0x6de <uarttransmits>
 920:	9f ef       	ldi	r25, 0xFF	; 255
 922:	21 ee       	ldi	r18, 0xE1	; 225
 924:	84 e0       	ldi	r24, 0x04	; 4
 926:	91 50       	subi	r25, 0x01	; 1
 928:	20 40       	sbci	r18, 0x00	; 0
 92a:	80 40       	sbci	r24, 0x00	; 0
 92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0x27>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
 930:	00 00       	nop
	uarttransmit('+');
	dtostrf(yaw,50,6,ptr);
	uarttransmits(ptr);
	
	#endif
}
 932:	ae 96       	adiw	r28, 0x2e	; 46
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	08 95       	ret

0000094c <main>:

int main(void){
	uartinit();
 94c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <uartinit>
	adcinit();
 950:	0e 94 7f 03 	call	0x6fe	; 0x6fe <adcinit>
		
	while(1){
		uarttransmit('#');
 954:	05 e0       	ldi	r16, 0x05	; 5
 956:	10 e0       	ldi	r17, 0x00	; 0
 958:	83 e2       	ldi	r24, 0x23	; 35
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
 960:	c0 2f       	mov	r28, r16
 962:	d1 2f       	mov	r29, r17
		for (int i=0; i<5; i++)
		{
			adcread(0); adctransmit();
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 8d 03 	call	0x71a	; 0x71a <adcread>
 96c:	0e 94 ce 03 	call	0x79c	; 0x79c <adctransmit>
			uarttransmit('+');
 970:	8b e2       	ldi	r24, 0x2B	; 43
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
 978:	21 97       	sbiw	r28, 0x01	; 1
	uartinit();
	adcinit();
		
	while(1){
		uarttransmit('#');
		for (int i=0; i<5; i++)
 97a:	a1 f7       	brne	.-24     	; 0x964 <main+0x18>
		{
			adcread(0); adctransmit();
			uarttransmit('+');
		}
		
		mpu(0);
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mpu>
		uarttransmit('+');
 984:	8b e2       	ldi	r24, 0x2B	; 43
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
		mpu(1);
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <mpu>
		uarttransmit('~');
 994:	8e e7       	ldi	r24, 0x7E	; 126
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 67 03 	call	0x6ce	; 0x6ce <uarttransmit>
	}
 99c:	dd cf       	rjmp	.-70     	; 0x958 <main+0xc>

0000099e <__divsf3>:
 99e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__divsf3x>
 9a2:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__fp_round>
 9a6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscB>
 9aa:	58 f0       	brcs	.+22     	; 0x9c2 <__divsf3+0x24>
 9ac:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_pscA>
 9b0:	40 f0       	brcs	.+16     	; 0x9c2 <__divsf3+0x24>
 9b2:	29 f4       	brne	.+10     	; 0x9be <__divsf3+0x20>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	29 f0       	breq	.+10     	; 0x9c2 <__divsf3+0x24>
 9b8:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_inf>
 9bc:	51 11       	cpse	r21, r1
 9be:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_szero>
 9c2:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_nan>

000009c6 <__divsf3x>:
 9c6:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_split3>
 9ca:	68 f3       	brcs	.-38     	; 0x9a6 <__divsf3+0x8>

000009cc <__divsf3_pse>:
 9cc:	99 23       	and	r25, r25
 9ce:	b1 f3       	breq	.-20     	; 0x9bc <__divsf3+0x1e>
 9d0:	55 23       	and	r21, r21
 9d2:	91 f3       	breq	.-28     	; 0x9b8 <__divsf3+0x1a>
 9d4:	95 1b       	sub	r25, r21
 9d6:	55 0b       	sbc	r21, r21
 9d8:	bb 27       	eor	r27, r27
 9da:	aa 27       	eor	r26, r26
 9dc:	62 17       	cp	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	38 f0       	brcs	.+14     	; 0x9f2 <__divsf3_pse+0x26>
 9e4:	9f 5f       	subi	r25, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	44 1f       	adc	r20, r20
 9ee:	aa 1f       	adc	r26, r26
 9f0:	a9 f3       	breq	.-22     	; 0x9dc <__divsf3_pse+0x10>
 9f2:	35 d0       	rcall	.+106    	; 0xa5e <__divsf3_pse+0x92>
 9f4:	0e 2e       	mov	r0, r30
 9f6:	3a f0       	brmi	.+14     	; 0xa06 <__divsf3_pse+0x3a>
 9f8:	e0 e8       	ldi	r30, 0x80	; 128
 9fa:	32 d0       	rcall	.+100    	; 0xa60 <__divsf3_pse+0x94>
 9fc:	91 50       	subi	r25, 0x01	; 1
 9fe:	50 40       	sbci	r21, 0x00	; 0
 a00:	e6 95       	lsr	r30
 a02:	00 1c       	adc	r0, r0
 a04:	ca f7       	brpl	.-14     	; 0x9f8 <__divsf3_pse+0x2c>
 a06:	2b d0       	rcall	.+86     	; 0xa5e <__divsf3_pse+0x92>
 a08:	fe 2f       	mov	r31, r30
 a0a:	29 d0       	rcall	.+82     	; 0xa5e <__divsf3_pse+0x92>
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	bb 1f       	adc	r27, r27
 a14:	26 17       	cp	r18, r22
 a16:	37 07       	cpc	r19, r23
 a18:	48 07       	cpc	r20, r24
 a1a:	ab 07       	cpc	r26, r27
 a1c:	b0 e8       	ldi	r27, 0x80	; 128
 a1e:	09 f0       	breq	.+2      	; 0xa22 <__divsf3_pse+0x56>
 a20:	bb 0b       	sbc	r27, r27
 a22:	80 2d       	mov	r24, r0
 a24:	bf 01       	movw	r22, r30
 a26:	ff 27       	eor	r31, r31
 a28:	93 58       	subi	r25, 0x83	; 131
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255
 a2c:	3a f0       	brmi	.+14     	; 0xa3c <__divsf3_pse+0x70>
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	51 05       	cpc	r21, r1
 a32:	78 f0       	brcs	.+30     	; 0xa52 <__divsf3_pse+0x86>
 a34:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_inf>
 a38:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_szero>
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	e4 f3       	brlt	.-8      	; 0xa38 <__divsf3_pse+0x6c>
 a40:	98 3e       	cpi	r25, 0xE8	; 232
 a42:	d4 f3       	brlt	.-12     	; 0xa38 <__divsf3_pse+0x6c>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	f7 95       	ror	r31
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__divsf3_pse+0x78>
 a52:	88 0f       	add	r24, r24
 a54:	91 1d       	adc	r25, r1
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	97 f9       	bld	r25, 7
 a5c:	08 95       	ret
 a5e:	e1 e0       	ldi	r30, 0x01	; 1
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	bb 1f       	adc	r27, r27
 a68:	62 17       	cp	r22, r18
 a6a:	73 07       	cpc	r23, r19
 a6c:	84 07       	cpc	r24, r20
 a6e:	ba 07       	cpc	r27, r26
 a70:	20 f0       	brcs	.+8      	; 0xa7a <__divsf3_pse+0xae>
 a72:	62 1b       	sub	r22, r18
 a74:	73 0b       	sbc	r23, r19
 a76:	84 0b       	sbc	r24, r20
 a78:	ba 0b       	sbc	r27, r26
 a7a:	ee 1f       	adc	r30, r30
 a7c:	88 f7       	brcc	.-30     	; 0xa60 <__divsf3_pse+0x94>
 a7e:	e0 95       	com	r30
 a80:	08 95       	ret

00000a82 <__floatunsisf>:
 a82:	e8 94       	clt
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__floatsisf+0x12>

00000a86 <__floatsisf>:
 a86:	97 fb       	bst	r25, 7
 a88:	3e f4       	brtc	.+14     	; 0xa98 <__floatsisf+0x12>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	99 23       	and	r25, r25
 a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x40>
 a9c:	f9 2f       	mov	r31, r25
 a9e:	96 e9       	ldi	r25, 0x96	; 150
 aa0:	bb 27       	eor	r27, r27
 aa2:	93 95       	inc	r25
 aa4:	f6 95       	lsr	r31
 aa6:	87 95       	ror	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b7 95       	ror	r27
 aae:	f1 11       	cpse	r31, r1
 ab0:	f8 cf       	rjmp	.-16     	; 0xaa2 <__floatsisf+0x1c>
 ab2:	fa f4       	brpl	.+62     	; 0xaf2 <__floatsisf+0x6c>
 ab4:	bb 0f       	add	r27, r27
 ab6:	11 f4       	brne	.+4      	; 0xabc <__floatsisf+0x36>
 ab8:	60 ff       	sbrs	r22, 0
 aba:	1b c0       	rjmp	.+54     	; 0xaf2 <__floatsisf+0x6c>
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <__floatsisf+0x6c>
 ac6:	88 23       	and	r24, r24
 ac8:	11 f0       	breq	.+4      	; 0xace <__floatsisf+0x48>
 aca:	96 e9       	ldi	r25, 0x96	; 150
 acc:	11 c0       	rjmp	.+34     	; 0xaf0 <__floatsisf+0x6a>
 ace:	77 23       	and	r23, r23
 ad0:	21 f0       	breq	.+8      	; 0xada <__floatsisf+0x54>
 ad2:	9e e8       	ldi	r25, 0x8E	; 142
 ad4:	87 2f       	mov	r24, r23
 ad6:	76 2f       	mov	r23, r22
 ad8:	05 c0       	rjmp	.+10     	; 0xae4 <__floatsisf+0x5e>
 ada:	66 23       	and	r22, r22
 adc:	71 f0       	breq	.+28     	; 0xafa <__floatsisf+0x74>
 ade:	96 e8       	ldi	r25, 0x86	; 134
 ae0:	86 2f       	mov	r24, r22
 ae2:	70 e0       	ldi	r23, 0x00	; 0
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	2a f0       	brmi	.+10     	; 0xaf2 <__floatsisf+0x6c>
 ae8:	9a 95       	dec	r25
 aea:	66 0f       	add	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	da f7       	brpl	.-10     	; 0xae8 <__floatsisf+0x62>
 af2:	88 0f       	add	r24, r24
 af4:	96 95       	lsr	r25
 af6:	87 95       	ror	r24
 af8:	97 f9       	bld	r25, 7
 afa:	08 95       	ret

00000afc <__fp_inf>:
 afc:	97 f9       	bld	r25, 7
 afe:	9f 67       	ori	r25, 0x7F	; 127
 b00:	80 e8       	ldi	r24, 0x80	; 128
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	60 e0       	ldi	r22, 0x00	; 0
 b06:	08 95       	ret

00000b08 <__fp_nan>:
 b08:	9f ef       	ldi	r25, 0xFF	; 255
 b0a:	80 ec       	ldi	r24, 0xC0	; 192
 b0c:	08 95       	ret

00000b0e <__fp_pscA>:
 b0e:	00 24       	eor	r0, r0
 b10:	0a 94       	dec	r0
 b12:	16 16       	cp	r1, r22
 b14:	17 06       	cpc	r1, r23
 b16:	18 06       	cpc	r1, r24
 b18:	09 06       	cpc	r0, r25
 b1a:	08 95       	ret

00000b1c <__fp_pscB>:
 b1c:	00 24       	eor	r0, r0
 b1e:	0a 94       	dec	r0
 b20:	12 16       	cp	r1, r18
 b22:	13 06       	cpc	r1, r19
 b24:	14 06       	cpc	r1, r20
 b26:	05 06       	cpc	r0, r21
 b28:	08 95       	ret

00000b2a <__fp_round>:
 b2a:	09 2e       	mov	r0, r25
 b2c:	03 94       	inc	r0
 b2e:	00 0c       	add	r0, r0
 b30:	11 f4       	brne	.+4      	; 0xb36 <__fp_round+0xc>
 b32:	88 23       	and	r24, r24
 b34:	52 f0       	brmi	.+20     	; 0xb4a <__fp_round+0x20>
 b36:	bb 0f       	add	r27, r27
 b38:	40 f4       	brcc	.+16     	; 0xb4a <__fp_round+0x20>
 b3a:	bf 2b       	or	r27, r31
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_round+0x18>
 b3e:	60 ff       	sbrs	r22, 0
 b40:	04 c0       	rjmp	.+8      	; 0xb4a <__fp_round+0x20>
 b42:	6f 5f       	subi	r22, 0xFF	; 255
 b44:	7f 4f       	sbci	r23, 0xFF	; 255
 b46:	8f 4f       	sbci	r24, 0xFF	; 255
 b48:	9f 4f       	sbci	r25, 0xFF	; 255
 b4a:	08 95       	ret

00000b4c <__fp_split3>:
 b4c:	57 fd       	sbrc	r21, 7
 b4e:	90 58       	subi	r25, 0x80	; 128
 b50:	44 0f       	add	r20, r20
 b52:	55 1f       	adc	r21, r21
 b54:	59 f0       	breq	.+22     	; 0xb6c <__fp_splitA+0x10>
 b56:	5f 3f       	cpi	r21, 0xFF	; 255
 b58:	71 f0       	breq	.+28     	; 0xb76 <__fp_splitA+0x1a>
 b5a:	47 95       	ror	r20

00000b5c <__fp_splitA>:
 b5c:	88 0f       	add	r24, r24
 b5e:	97 fb       	bst	r25, 7
 b60:	99 1f       	adc	r25, r25
 b62:	61 f0       	breq	.+24     	; 0xb7c <__fp_splitA+0x20>
 b64:	9f 3f       	cpi	r25, 0xFF	; 255
 b66:	79 f0       	breq	.+30     	; 0xb86 <__fp_splitA+0x2a>
 b68:	87 95       	ror	r24
 b6a:	08 95       	ret
 b6c:	12 16       	cp	r1, r18
 b6e:	13 06       	cpc	r1, r19
 b70:	14 06       	cpc	r1, r20
 b72:	55 1f       	adc	r21, r21
 b74:	f2 cf       	rjmp	.-28     	; 0xb5a <__fp_split3+0xe>
 b76:	46 95       	lsr	r20
 b78:	f1 df       	rcall	.-30     	; 0xb5c <__fp_splitA>
 b7a:	08 c0       	rjmp	.+16     	; 0xb8c <__fp_splitA+0x30>
 b7c:	16 16       	cp	r1, r22
 b7e:	17 06       	cpc	r1, r23
 b80:	18 06       	cpc	r1, r24
 b82:	99 1f       	adc	r25, r25
 b84:	f1 cf       	rjmp	.-30     	; 0xb68 <__fp_splitA+0xc>
 b86:	86 95       	lsr	r24
 b88:	71 05       	cpc	r23, r1
 b8a:	61 05       	cpc	r22, r1
 b8c:	08 94       	sec
 b8e:	08 95       	ret

00000b90 <__fp_zero>:
 b90:	e8 94       	clt

00000b92 <__fp_szero>:
 b92:	bb 27       	eor	r27, r27
 b94:	66 27       	eor	r22, r22
 b96:	77 27       	eor	r23, r23
 b98:	cb 01       	movw	r24, r22
 b9a:	97 f9       	bld	r25, 7
 b9c:	08 95       	ret

00000b9e <__mulsf3>:
 b9e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3x>
 ba2:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__fp_round>
 ba6:	0e 94 87 05 	call	0xb0e	; 0xb0e <__fp_pscA>
 baa:	38 f0       	brcs	.+14     	; 0xbba <__mulsf3+0x1c>
 bac:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__fp_pscB>
 bb0:	20 f0       	brcs	.+8      	; 0xbba <__mulsf3+0x1c>
 bb2:	95 23       	and	r25, r21
 bb4:	11 f0       	breq	.+4      	; 0xbba <__mulsf3+0x1c>
 bb6:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_inf>
 bba:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_nan>
 bbe:	11 24       	eor	r1, r1
 bc0:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_szero>

00000bc4 <__mulsf3x>:
 bc4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_split3>
 bc8:	70 f3       	brcs	.-36     	; 0xba6 <__mulsf3+0x8>

00000bca <__mulsf3_pse>:
 bca:	95 9f       	mul	r25, r21
 bcc:	c1 f3       	breq	.-16     	; 0xbbe <__mulsf3+0x20>
 bce:	95 0f       	add	r25, r21
 bd0:	50 e0       	ldi	r21, 0x00	; 0
 bd2:	55 1f       	adc	r21, r21
 bd4:	62 9f       	mul	r22, r18
 bd6:	f0 01       	movw	r30, r0
 bd8:	72 9f       	mul	r23, r18
 bda:	bb 27       	eor	r27, r27
 bdc:	f0 0d       	add	r31, r0
 bde:	b1 1d       	adc	r27, r1
 be0:	63 9f       	mul	r22, r19
 be2:	aa 27       	eor	r26, r26
 be4:	f0 0d       	add	r31, r0
 be6:	b1 1d       	adc	r27, r1
 be8:	aa 1f       	adc	r26, r26
 bea:	64 9f       	mul	r22, r20
 bec:	66 27       	eor	r22, r22
 bee:	b0 0d       	add	r27, r0
 bf0:	a1 1d       	adc	r26, r1
 bf2:	66 1f       	adc	r22, r22
 bf4:	82 9f       	mul	r24, r18
 bf6:	22 27       	eor	r18, r18
 bf8:	b0 0d       	add	r27, r0
 bfa:	a1 1d       	adc	r26, r1
 bfc:	62 1f       	adc	r22, r18
 bfe:	73 9f       	mul	r23, r19
 c00:	b0 0d       	add	r27, r0
 c02:	a1 1d       	adc	r26, r1
 c04:	62 1f       	adc	r22, r18
 c06:	83 9f       	mul	r24, r19
 c08:	a0 0d       	add	r26, r0
 c0a:	61 1d       	adc	r22, r1
 c0c:	22 1f       	adc	r18, r18
 c0e:	74 9f       	mul	r23, r20
 c10:	33 27       	eor	r19, r19
 c12:	a0 0d       	add	r26, r0
 c14:	61 1d       	adc	r22, r1
 c16:	23 1f       	adc	r18, r19
 c18:	84 9f       	mul	r24, r20
 c1a:	60 0d       	add	r22, r0
 c1c:	21 1d       	adc	r18, r1
 c1e:	82 2f       	mov	r24, r18
 c20:	76 2f       	mov	r23, r22
 c22:	6a 2f       	mov	r22, r26
 c24:	11 24       	eor	r1, r1
 c26:	9f 57       	subi	r25, 0x7F	; 127
 c28:	50 40       	sbci	r21, 0x00	; 0
 c2a:	9a f0       	brmi	.+38     	; 0xc52 <__mulsf3_pse+0x88>
 c2c:	f1 f0       	breq	.+60     	; 0xc6a <__mulsf3_pse+0xa0>
 c2e:	88 23       	and	r24, r24
 c30:	4a f0       	brmi	.+18     	; 0xc44 <__mulsf3_pse+0x7a>
 c32:	ee 0f       	add	r30, r30
 c34:	ff 1f       	adc	r31, r31
 c36:	bb 1f       	adc	r27, r27
 c38:	66 1f       	adc	r22, r22
 c3a:	77 1f       	adc	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	91 50       	subi	r25, 0x01	; 1
 c40:	50 40       	sbci	r21, 0x00	; 0
 c42:	a9 f7       	brne	.-22     	; 0xc2e <__mulsf3_pse+0x64>
 c44:	9e 3f       	cpi	r25, 0xFE	; 254
 c46:	51 05       	cpc	r21, r1
 c48:	80 f0       	brcs	.+32     	; 0xc6a <__mulsf3_pse+0xa0>
 c4a:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_inf>
 c4e:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__fp_szero>
 c52:	5f 3f       	cpi	r21, 0xFF	; 255
 c54:	e4 f3       	brlt	.-8      	; 0xc4e <__mulsf3_pse+0x84>
 c56:	98 3e       	cpi	r25, 0xE8	; 232
 c58:	d4 f3       	brlt	.-12     	; 0xc4e <__mulsf3_pse+0x84>
 c5a:	86 95       	lsr	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	b7 95       	ror	r27
 c62:	f7 95       	ror	r31
 c64:	e7 95       	ror	r30
 c66:	9f 5f       	subi	r25, 0xFF	; 255
 c68:	c1 f7       	brne	.-16     	; 0xc5a <__mulsf3_pse+0x90>
 c6a:	fe 2b       	or	r31, r30
 c6c:	88 0f       	add	r24, r24
 c6e:	91 1d       	adc	r25, r1
 c70:	96 95       	lsr	r25
 c72:	87 95       	ror	r24
 c74:	97 f9       	bld	r25, 7
 c76:	08 95       	ret

00000c78 <__itoa_ncheck>:
 c78:	bb 27       	eor	r27, r27
 c7a:	4a 30       	cpi	r20, 0x0A	; 10
 c7c:	31 f4       	brne	.+12     	; 0xc8a <__itoa_ncheck+0x12>
 c7e:	99 23       	and	r25, r25
 c80:	22 f4       	brpl	.+8      	; 0xc8a <__itoa_ncheck+0x12>
 c82:	bd e2       	ldi	r27, 0x2D	; 45
 c84:	90 95       	com	r25
 c86:	81 95       	neg	r24
 c88:	9f 4f       	sbci	r25, 0xFF	; 255
 c8a:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__utoa_common>

00000c8e <__ltoa_ncheck>:
 c8e:	bb 27       	eor	r27, r27
 c90:	2a 30       	cpi	r18, 0x0A	; 10
 c92:	51 f4       	brne	.+20     	; 0xca8 <__ltoa_ncheck+0x1a>
 c94:	99 23       	and	r25, r25
 c96:	42 f4       	brpl	.+16     	; 0xca8 <__ltoa_ncheck+0x1a>
 c98:	bd e2       	ldi	r27, 0x2D	; 45
 c9a:	90 95       	com	r25
 c9c:	80 95       	com	r24
 c9e:	70 95       	com	r23
 ca0:	61 95       	neg	r22
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	0c 94 57 06 	jmp	0xcae	; 0xcae <__ultoa_common>

00000cac <__ultoa_ncheck>:
 cac:	bb 27       	eor	r27, r27

00000cae <__ultoa_common>:
 cae:	fa 01       	movw	r30, r20
 cb0:	a6 2f       	mov	r26, r22
 cb2:	62 17       	cp	r22, r18
 cb4:	71 05       	cpc	r23, r1
 cb6:	81 05       	cpc	r24, r1
 cb8:	91 05       	cpc	r25, r1
 cba:	33 0b       	sbc	r19, r19
 cbc:	30 fb       	bst	r19, 0
 cbe:	66 f0       	brts	.+24     	; 0xcd8 <__ultoa_common+0x2a>
 cc0:	aa 27       	eor	r26, r26
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	99 1f       	adc	r25, r25
 cca:	aa 1f       	adc	r26, r26
 ccc:	a2 17       	cp	r26, r18
 cce:	10 f0       	brcs	.+4      	; 0xcd4 <__ultoa_common+0x26>
 cd0:	a2 1b       	sub	r26, r18
 cd2:	63 95       	inc	r22
 cd4:	38 50       	subi	r19, 0x08	; 8
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__ultoa_common+0x14>
 cd8:	a0 5d       	subi	r26, 0xD0	; 208
 cda:	aa 33       	cpi	r26, 0x3A	; 58
 cdc:	08 f0       	brcs	.+2      	; 0xce0 <__ultoa_common+0x32>
 cde:	a9 5d       	subi	r26, 0xD9	; 217
 ce0:	a1 93       	st	Z+, r26
 ce2:	36 f7       	brtc	.-52     	; 0xcb0 <__ultoa_common+0x2>
 ce4:	b1 11       	cpse	r27, r1
 ce6:	b1 93       	st	Z+, r27
 ce8:	10 82       	st	Z, r1
 cea:	ca 01       	movw	r24, r20
 cec:	0c 94 92 06 	jmp	0xd24	; 0xd24 <strrev>

00000cf0 <__utoa_ncheck>:
 cf0:	bb 27       	eor	r27, r27

00000cf2 <__utoa_common>:
 cf2:	fb 01       	movw	r30, r22
 cf4:	55 27       	eor	r21, r21
 cf6:	aa 27       	eor	r26, r26
 cf8:	88 0f       	add	r24, r24
 cfa:	99 1f       	adc	r25, r25
 cfc:	aa 1f       	adc	r26, r26
 cfe:	a4 17       	cp	r26, r20
 d00:	10 f0       	brcs	.+4      	; 0xd06 <__utoa_common+0x14>
 d02:	a4 1b       	sub	r26, r20
 d04:	83 95       	inc	r24
 d06:	50 51       	subi	r21, 0x10	; 16
 d08:	b9 f7       	brne	.-18     	; 0xcf8 <__utoa_common+0x6>
 d0a:	a0 5d       	subi	r26, 0xD0	; 208
 d0c:	aa 33       	cpi	r26, 0x3A	; 58
 d0e:	08 f0       	brcs	.+2      	; 0xd12 <__utoa_common+0x20>
 d10:	a9 5d       	subi	r26, 0xD9	; 217
 d12:	a1 93       	st	Z+, r26
 d14:	00 97       	sbiw	r24, 0x00	; 0
 d16:	79 f7       	brne	.-34     	; 0xcf6 <__utoa_common+0x4>
 d18:	b1 11       	cpse	r27, r1
 d1a:	b1 93       	st	Z+, r27
 d1c:	11 92       	st	Z+, r1
 d1e:	cb 01       	movw	r24, r22
 d20:	0c 94 92 06 	jmp	0xd24	; 0xd24 <strrev>

00000d24 <strrev>:
 d24:	dc 01       	movw	r26, r24
 d26:	fc 01       	movw	r30, r24
 d28:	67 2f       	mov	r22, r23
 d2a:	71 91       	ld	r23, Z+
 d2c:	77 23       	and	r23, r23
 d2e:	e1 f7       	brne	.-8      	; 0xd28 <strrev+0x4>
 d30:	32 97       	sbiw	r30, 0x02	; 2
 d32:	04 c0       	rjmp	.+8      	; 0xd3c <strrev+0x18>
 d34:	7c 91       	ld	r23, X
 d36:	6d 93       	st	X+, r22
 d38:	70 83       	st	Z, r23
 d3a:	62 91       	ld	r22, -Z
 d3c:	ae 17       	cp	r26, r30
 d3e:	bf 07       	cpc	r27, r31
 d40:	c8 f3       	brcs	.-14     	; 0xd34 <strrev+0x10>
 d42:	08 95       	ret

00000d44 <_exit>:
 d44:	f8 94       	cli

00000d46 <__stop_program>:
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <__stop_program>
